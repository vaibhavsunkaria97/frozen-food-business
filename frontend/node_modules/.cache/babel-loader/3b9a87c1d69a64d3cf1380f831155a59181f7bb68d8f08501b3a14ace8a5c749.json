{"ast":null,"code":"const User = require(\"../models/userModel\");\nconst jwt = require(\"jsonwebtoken\");\n\n// Generate JWT\nconst generateToken = id => {\n  return jwt.sign({\n    id\n  }, process.env.JWT_SECRET, {\n    expiresIn: \"30d\"\n  });\n};\n\n// Register a new user\nexports.registerUser = async (req, res) => {\n  const {\n    name,\n    email,\n    password\n  } = req.body;\n  try {\n    // Log incoming request body for debugging\n    console.log(\"Incoming request body:\", req.body);\n\n    // Validate input\n    if (!name || !email || !password) {\n      return res.status(400).json({\n        success: false,\n        message: \"All fields are required\"\n      });\n    }\n    if (password.length < 6) {\n      return res.status(400).json({\n        success: false,\n        message: \"Password must be at least 6 characters long\"\n      });\n    }\n\n    // Check if user already exists\n    const userExists = await User.findOne({\n      email\n    });\n    if (userExists) {\n      console.log(`User with email ${email} already exists.`);\n      return res.status(400).json({\n        success: false,\n        message: \"User already exists. Please log in.\"\n      });\n    }\n\n    // Create a new user\n    const user = await User.create({\n      name,\n      email,\n      password\n    });\n\n    // Log the created user for debugging\n    console.log(\"New user created:\", user);\n\n    // Respond with success and user data\n    res.status(201).json({\n      success: true,\n      user: {\n        _id: user.id,\n        name: user.name,\n        email: user.email,\n        isAdmin: user.isAdmin\n      },\n      token: generateToken(user._id) // Include JWT token in response\n    });\n  } catch (err) {\n    console.error(\"Error during registration:\", err); // Log full error object\n    // Differentiating between validation and server errors\n    if (err.name === \"ValidationError\") {\n      res.status(400).json({\n        success: false,\n        message: \"Validation Error\",\n        errors: err.errors\n      });\n    } else {\n      res.status(500).json({\n        success: false,\n        message: \"Server error occurred\",\n        error: err.message\n      });\n    }\n  }\n};","map":{"version":3,"names":["User","require","jwt","generateToken","id","sign","process","env","JWT_SECRET","expiresIn","exports","registerUser","req","res","name","email","password","body","console","log","status","json","success","message","length","userExists","findOne","user","create","_id","isAdmin","token","err","error","errors"],"sources":["C:/Users/Vaibhav.Sunkaria/frozen-food-business/frontend/src/pages/Register.js"],"sourcesContent":["const User = require(\"../models/userModel\");\r\nconst jwt = require(\"jsonwebtoken\");\r\n\r\n// Generate JWT\r\nconst generateToken = (id) => {\r\n    return jwt.sign({ id }, process.env.JWT_SECRET, { expiresIn: \"30d\" });\r\n};\r\n\r\n// Register a new user\r\nexports.registerUser = async (req, res) => {\r\n    const { name, email, password } = req.body;\r\n\r\n    try {\r\n        // Log incoming request body for debugging\r\n        console.log(\"Incoming request body:\", req.body);\r\n\r\n        // Validate input\r\n        if (!name || !email || !password) {\r\n            return res\r\n                .status(400)\r\n                .json({ success: false, message: \"All fields are required\" });\r\n        }\r\n\r\n        if (password.length < 6) {\r\n            return res\r\n                .status(400)\r\n                .json({ success: false, message: \"Password must be at least 6 characters long\" });\r\n        }\r\n\r\n        // Check if user already exists\r\n        const userExists = await User.findOne({ email });\r\n        if (userExists) {\r\n            console.log(`User with email ${email} already exists.`);\r\n            return res.status(400).json({\r\n                success: false,\r\n                message: \"User already exists. Please log in.\",\r\n            });\r\n        }\r\n\r\n        // Create a new user\r\n        const user = await User.create({ name, email, password });\r\n\r\n        // Log the created user for debugging\r\n        console.log(\"New user created:\", user);\r\n\r\n        // Respond with success and user data\r\n        res.status(201).json({\r\n            success: true,\r\n            user: {\r\n                _id: user.id,\r\n                name: user.name,\r\n                email: user.email,\r\n                isAdmin: user.isAdmin,\r\n            },\r\n            token: generateToken(user._id), // Include JWT token in response\r\n        });\r\n    } catch (err) {\r\n        console.error(\"Error during registration:\", err); // Log full error object\r\n        // Differentiating between validation and server errors\r\n        if (err.name === \"ValidationError\") {\r\n            res.status(400).json({\r\n                success: false,\r\n                message: \"Validation Error\",\r\n                errors: err.errors,\r\n            });\r\n        } else {\r\n            res.status(500).json({\r\n                success: false,\r\n                message: \"Server error occurred\",\r\n                error: err.message,\r\n            });\r\n        }\r\n    }\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}