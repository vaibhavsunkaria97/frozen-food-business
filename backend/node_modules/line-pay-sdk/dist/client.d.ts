import * as Types from "./types";
export default class Client {
    config: Types.ClientConfig;
    apiUrl: string;
    headers: Types.Headers;
    /**
     * Creates an instance of Client.
     * @param {ClientConfig} config
     * @memberof Client
     */
    constructor(config: Types.ClientConfig);
    /**
     * Middleware to start payment flow.
     * @param {Types.MiddlewareConfig} config
     * @returns {Promise<any>}
     * @memberof Client
     */
    middleware(config: Types.MiddlewareConfig): Types.Middleware;
    /**
     * Get Payment Details API
     *
     * Gets the details of payments made with LINE Pay.
     * This API only gets the payments that have been captured.
     *
     * @param {Types.OptionsGetPaymentDetails} options
     * @returns {Promise<any>}
     * @memberof Client
     */
    getPaymentDetails(options: Types.OptionsGetPaymentDetails): Promise<any>;
    /**
     * Reserve Payment API
     *
     * Prior to processing payments with LINE Pay,
     * the Merchant is evaluated if it is a normal Merchant store
     * then the information is reserved for payment. When a payment is successfully reserved,
     * the Merchant gets a "transaction Id" that is a key value used until the payment is completed or refunded.
     *
     * @param {OptionsReservePayment} options
     * @returns {Promise<any>}
     * @memberof Client
     */
    reservePayment(options: Types.OptionsReservePayment): Promise<any>;
    /**
     * Payment Confirm API
     *
     * This API is used for a Merchant to complete its payment.
     * The Merchant must call Confirm Payment API to actually complete the payment.
     * However, when "capture" parameter is "false" on payment reservation,
     * the payment status becomes AUTHORIZATION, and the payment is completed only after "Capture API" is called.
     *
     * @param {OptionsConfirmPayment} options
     * @returns {Promise<any>}
     * @memberof Client
     */
    confirmPayment(options: Types.OptionsConfirmPayment): Promise<any>;
    /**
     * Refund Payment API
     *
     * Requests refund of payments made with LINE Pay. To refund a payment,
     * the LINE Pay user's payment transaction Id must be forwarded.
     * A partial refund is also possible depending on the refund amount.
     *
     * @param {Types.OptionsRefundPayment} options
     * @returns {Promise<any>}
     * @memberof Client
     */
    refundPayment(options: Types.OptionsRefundPayment): Promise<any>;
    /**
     * Get Authorization Details API
     *
     * Gets the details authorized with LINE Pay.
     * This API only gets data that is authorized or whose authorization is voided;
     * the one that is already captured can be viewed by using "Get Payment Details API”.
     *
     * @param {OptionsGetAuthorizationDetails} options
     * @returns {Promise<any>}
     * @memberof Client
     */
    getAuthorizationDetails(options: Types.OptionsGetAuthorizationDetails): Promise<any>;
    /**
     * Capture API
     *
     * If "capture" is "false" when the Merchant calls the “Reserve Payment API” ,
     * the payment is completed only after the Capture API is called.
     *
     * @param {OptionsCapture} options
     * @returns {Promise<any>}
     * @memberof Client
     */
    capture(options: Types.OptionsCapture): Promise<any>;
    /**
     * Void Authorization API
     *
     * Voids a previously authorized payment.
     * A payment that has been already captured can be refunded by using the “Refund Payment API”
     *
     * @param {OptionsVoidAuthorization} options
     * @returns {Promise<any>}
     * @memberof Client
     */
    voidAuthorization(options: Types.OptionsVoidAuthorization): Promise<any>;
    /**
     * Preapproved Payment API
     *
     * When the payment type of the Reserve Payment API was set as PREAPPROVED,
     * a regKey is returned with the payment result.
     * Preapproved Payment API uses this regKey to directly complete a payment without using the LINE app.
     *
     * @param {OptionsPreApprovedPayment} options
     * @returns {Promise<any>}
     * @memberof Client
     */
    preApprovedPayment(options: Types.OptionsPreApprovedPayment): Promise<any>;
    /**
     * Check regKey Status API
     *
     * Checks if regKey is available before using the preapproved payment API.
     *
     * @param {OptionsCheckRegKeyStatus} options
     * @returns {Promise<any>}
     * @memberof Client
     */
    checkRegKeyStatus(options: Types.OptionsCheckRegKeyStatus): Promise<any>;
    /**
     * Expire regKey API
     *
     * Expires the regKey information registered for preapproved payment.
     * Once the API is called, the regKey is no longer used for preapproved payments.
     *
     * @param {OptionsExpireRegKey} options
     * @returns {Promise<any>}
     * @memberof Client
     */
    expireRegKey(options: Types.OptionsExpireRegKey): Promise<any>;
}
