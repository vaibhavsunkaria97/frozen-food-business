"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const qs = require("querystring");
const apiURL = (baseURL, path, query) => baseURL + path + (query ? `?${qs.stringify(query)}` : "");
exports.middlewareConfirm = (baseURL) => apiURL(baseURL, "confirm");
exports.payments = (baseURL, transactionId, orderId) => {
    let query = {};
    if (transactionId) {
        query.transactionId = transactionId;
    }
    if (orderId) {
        query.orderId = orderId;
    }
    return apiURL(baseURL, `payments`, isEmpty(query) ? null : query);
};
exports.paymentsRequest = (baseURL) => apiURL(baseURL, "payments/request");
exports.paymentsConfirm = (baseURL, transactionId) => apiURL(baseURL, `payments/${transactionId}/confirm`);
exports.paymentsRefund = (baseURL, transactionId) => apiURL(baseURL, `payments/${transactionId}/refund`);
exports.paymentsAuthorizations = (baseURL, transactionId, orderId) => {
    let query = {};
    if (transactionId) {
        query.transactionId = transactionId;
    }
    if (orderId) {
        query.orderId = orderId;
    }
    return apiURL(baseURL, `payments/authorizations`, isEmpty(query) ? null : query);
};
exports.paymentsAuthorizationsCapture = (baseURL, transactionId) => apiURL(baseURL, `payments/authorizations/${transactionId}/capture`);
exports.paymentsAuthorizationsVoid = (baseURL, transactionId) => apiURL(baseURL, `payments/authorizations/${transactionId}/void`);
exports.paymentsPreApprovedPayPayment = (baseURL, regKey) => apiURL(baseURL, `payments/preapprovedPay/${regKey}/payment`);
exports.paymentsPreApprovedPayCheck = (baseURL, regKey, creditCardAuth) => {
    let query = {};
    if (creditCardAuth === true) {
        query.creditCardAuth = true;
    }
    return apiURL(baseURL, `payments/preapprovedPay/${regKey}/check`, isEmpty(query) ? null : query);
};
exports.paymentsPreApprovedPayExpire = (baseURL, regKey) => apiURL(baseURL, `payments/preapprovedPay/${regKey}/expire`);
function isEmpty(obj) {
    for (var prop in obj) {
        if (obj.hasOwnProperty(prop)) {
            return false;
        }
    }
    return true;
}
